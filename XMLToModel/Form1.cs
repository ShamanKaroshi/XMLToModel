using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;

namespace XMLToModel
{
    public partial class Form1 : Form
    {
        /// <summary>
        /// 
        /// </summary>
        private KeyPairs kp = new KeyPairs();
        /// <summary>
        /// 
        /// </summary>
        public Form1()
        {
            InitializeComponent();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cmdParseXML_Click(object sender, EventArgs e)
        {
            ParseXMLFile(txtXMLInputFile.Text, txtXMLNode.Text);
            MakeDataModel(txtModelFileName.Text, txtModelNamespace.Text, txtModelClassName.Text);
        }


        private bool MakeXMLParserProc(string filePath, string modelNamespace, string modelClassName)
        {
            StringBuilder sb = new StringBuilder();

            // Now write the file to the file system.
            try
            {
                System.IO.File.WriteAllText(filePath, sb.ToString());
            }
            catch (Exception ex)
            {
                string err = ex.Message;
            }
            return true;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="filePath"></param>
        /// <param name="modelNamespace"></param>
        /// <param name="modelClassName"></param>
        /// <returns></returns>
        private bool MakeDataModel(string filePath, string modelNamespace, string modelClassName)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("//       Autogenerated Class From XMLToModel         //");
            stringBuilder.AppendLine("using System;");
            stringBuilder.AppendLine("using System.Collections.Generic;");
            stringBuilder.AppendLine("using System.Linq;");
            stringBuilder.AppendLine("");
            stringBuilder.AppendLine("namespace " + modelNamespace);
            stringBuilder.AppendLine("{");
            stringBuilder.AppendLine("\t/// <summary>");
            stringBuilder.AppendLine("\t/// ");
            stringBuilder.AppendLine("\t/// </summary>");
            stringBuilder.AppendLine("\tpublic class " + modelClassName);
            stringBuilder.AppendLine("\t{");
            for (int i = 0; i < this.kp.Count(); i++)
            {
                KeyPair keyPair = this.kp.Get(i);
                string text = keyPair.key;
                bool @checked = this.chkFixUpNames.Checked;
                if (@checked)
                {
                    text = this.FixUpdateObjectName(text);
                }
                stringBuilder.AppendLine("\t\t/// <summary>");
                stringBuilder.AppendLine("\t\t/// ");
                stringBuilder.AppendLine("\t\t/// </summary>");
                stringBuilder.AppendFormat("\t\tpublic {0} {1} {2}\r\n", "string", text, "{ get; set; }");
            }
            stringBuilder.AppendLine("");
            stringBuilder.AppendLine("\t}");
            stringBuilder.AppendLine("}");
            stringBuilder.AppendLine("");
            try
            {
                File.WriteAllText(filePath, stringBuilder.ToString());
            }
            catch (Exception ex)
            {
                string message = ex.Message;
            }
            return true;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="filePath"></param>
        /// <param name="nameSpace"></param>
        /// <param name="className"></param>
        /// <param name="functionName"></param>
        /// <param name="nodeListPath"></param>
        /// <param name="modelNamespace"></param>
        /// <param name="modelClassName"></param>
        /// <returns></returns>
        private bool MakeParserCode(string filePath, string nameSpace, string className, string functionName, string nodeListPath, string modelNamespace, string modelClassName)
        {

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("//       Autogenerated Class From XMLToModel         //");
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using System.Linq;");
            sb.AppendLine("using System.Xml;");
            sb.AppendLine("using " + modelNamespace + ";");
            sb.AppendLine("");
            sb.AppendLine("");
            sb.AppendLine("namespace " + nameSpace);
            sb.AppendLine("{");
            sb.AppendLine("\t/// <summary>");
            sb.AppendLine("\t/// ");
            sb.AppendLine("\t/// </summary>");
            sb.AppendLine("\tpublic class " + className);
            sb.AppendLine("\t{");
            //sb.AppendLine("");
            //sb.AppendLine("");
            //sb.AppendLine("");
            //sb.AppendLine("");
            sb.AppendLine("\t\t/// <summary>");
            sb.AppendLine("\t\t/// ");
            sb.AppendLine("\t\t/// </summary>");
            sb.AppendLine("\t\tpublic List<" + modelClassName + "> " + functionName + "(string xmlFilePath)");
            sb.AppendLine("\t\t{");
            sb.AppendLine("\t\t\tList<" + modelClassName + "> objCol = new List <" + modelClassName + ">();");
            sb.AppendLine("\t\t\tXmlDocument xDoc = new XmlDocument();");
            sb.AppendLine("\t\t\txDoc.Load(xmlFilePath);");
            sb.AppendLine("\t\t\tXmlNodeList xnList = xDoc.SelectNodes(\"" + nodeListPath + "\");");
            sb.AppendLine("\t\t\tforeach (XmlNode xn in xnList)");
            sb.AppendLine("\t\t\t{");
            sb.AppendLine("\t\t\t\t" + modelClassName + " obj = new " + modelClassName + "();");
            //sb.AppendLine("");
            //sb.AppendLine("");
            for (int i = 0; i < kp.Count(); i++)
            {
                KeyPair k = kp.Get(i);
                string value = k.key;
                if (chkFixUpNames.Checked)
                {
                    value = FixUpdateObjectName(value);
                }
                
                sb.AppendFormat("\t\t\t\t{0}.{1} = xn[\"{2}\"].InnerText;\r\n", "obj", value, k.key);
            }
            sb.AppendLine("\t\t\t\tobjCol.Add(obj);");
            sb.AppendLine("\t\t\t}"); // Close foreach loop
            sb.AppendLine("\t\t\treturn objCol;");
            sb.AppendLine("\t\t}");   // Close the function.
            sb.AppendLine("\t}");     // Close the class.
            sb.AppendLine("}");       // Close the namespace.
            sb.AppendLine("");
            sb.AppendLine("");
            // Now write the file to the file system.
            try
            {
                System.IO.File.WriteAllText(filePath, sb.ToString());
            }
            catch (Exception ex)
            {
                string err = ex.Message;
            }
            return true;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="filePath"></param>
        /// <param name="nodeName"></param>
        /// <returns></returns>
        public bool ParseXMLFile(string filePath, string nodeName)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(filePath);
            XmlNodeList name = doc.GetElementsByTagName(nodeName);
            // Now walk the children top elements and create the model.
            // < DATA_RECORD >
            for (int i = 0; i < name.Count; i++)
            {
                XmlNodeList xn = name[i].ChildNodes;
                for (int x = 0; x < xn.Count; x++)
                {
                    XmlNode cn = xn[x];
                    KeyPair kpE = new KeyPair();
                    kp.Add(cn.Name, cn.InnerText);
                }
                return true;
            }
            return true;
        }

        /// <summary>
        /// Will return a string remove all "_"
        /// </summary>
        /// <param name="inObjectName">String to remove the underscore</param>
        /// <returns>String returning the fixed up name.</returns>
        public string FixUpdateObjectName(string inObjectName)
        {

            string outOjbectName = inObjectName.ToLower();
            StringBuilder sb = new StringBuilder();
            string[] ele = outOjbectName.Split('_');
            for (int i = 0; i < ele.Length; i++)
            {
                string upTmp = UppercaseFirst(ele[i]);
                sb.Append(upTmp);
            }
            return sb.ToString();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="param"></param>
        /// <returns></returns>
        public string StripParameterAt(string param)
        {
            string ret = param.Replace('@', ' ').Trim();
            //ret = FixUpdateObjectName(ret);
            return ret;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="s"></param>
        /// <returns></returns>
        private string UppercaseFirst(string s)
        {
            // Check for empty string.
            if (string.IsNullOrEmpty(s))
            {
                return string.Empty;
            }
            // Return char and concat substring.
            return char.ToUpper(s[0]) + s.Substring(1);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cmdGenerate_Click(object sender, EventArgs e)
        {
            MakeParserCode(txtParserOutputFile.Text, txtParserCodeNamespace.Text, txtClassName.Text, txtFunctionName.Text, txtNodeListPath.Text, txtModelNamespace.Text, txtModelClassName.Text);
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }
    }
}
